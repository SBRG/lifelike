"""Adds a temp lookup table for organism/gene pairs. This is a stand-in for
Robin's Neo4j dataset while we figure out how to handle individual strains
for organisms.

Revision ID: 782b6ba8b7eb
Revises: f5c30dc0effe
Create Date: 2020-05-04 23:15:48.765478

"""
from os import path

from alembic import context
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql import table, column


# revision identifiers, used by Alembic.
revision = '782b6ba8b7eb'
down_revision = 'f5c30dc0effe'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'organism_gene_match',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('gene_id', sa.String(length=128), nullable=False),
        sa.Column('gene_name', sa.String(length=128), nullable=False),
        sa.Column('synonym', sa.String(length=128), nullable=False),
        sa.Column('taxonomy_id', sa.String(length=128), nullable=False),
        sa.Column('organism', sa.String(length=128), nullable=False),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_organism_gene_match'))
    )
    # ### end Alembic commands ###
    if context.get_x_argument(as_dictionary=True).get('data_migrate', None):
        data_upgrades()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('organism_gene_match')
    # ### end Alembic commands ###
    # NOTE: In practice perfect downgrades are difficult and in some cases
    # impossible! It is more practical to use database backups/snapshots to
    # "downgrade" the database. Changes to the database that we intend to
    # push to production should always be added to a NEW migration.
    # (i.e. "downgrade forward"!)


def data_upgrades():
    """Add optional data upgrade migrations here"""
    conn = op.get_bind()

    # reference to this directory
    directory = path.realpath(path.dirname(__file__))

    tableclause1 = table(
        'organism_gene_match',
        column('id', sa.Integer),
        column('gene_id', sa.String),
        column('gene_name', sa.String),
        column('synonym', sa.String),
        column('taxonomy_id', sa.String),
        column('organism', sa.String))

    rows = []
    with open(path.join(directory, '../upgrade_data/gene_names_for_4organisms.csv'), 'r') as f:
        for line in f:
            # GeneID,GeneName,Synonym,Tax_ID, Organism
            data = line.split(',')
            rows.append({
                'gene_id': data[0].strip(),
                'gene_name': data[1].strip(),
                'synonym': data[2].strip(),
                'taxonomy_id': data[3].strip(),
                'organism': data[4].strip()
            })

            if len(rows) == 250:
                try:
                    conn.execute(tableclause1.insert().values(rows))
                except Exception:
                    raise


def data_downgrades():
    """Add optional data downgrade migrations here"""
    pass
