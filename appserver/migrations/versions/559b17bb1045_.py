"""Makes a composite primary key with the map id and user id
since each user can have their own "backup" of a map they're
collaborating in.

Revision ID: 559b17bb1045
Revises: e58082ac34b8
Create Date: 2021-01-29 23:29:32.230324

"""
from alembic import context
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '559b17bb1045'
down_revision = 'e58082ac34b8'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # ### end Alembic commands ###
    op.drop_constraint('pk_project_backup', 'project_backup', 'primary')
    op.create_primary_key(
        None,
        'project_backup',
        ['project_id', 'user_id'],
    )

    if context.get_x_argument(as_dictionary=True).get('data_migrate', None):
        data_upgrades()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # ### end Alembic commands ###
    # NOTE: In practice perfect downgrades are difficult and in some cases
    # impossible! It is more practical to use database backups/snapshots to
    # "downgrade" the database. Changes to the database that we intend to
    # push to production should always be added to a NEW migration.
    # (i.e. "downgrade forward"!)
    pass

def data_upgrades():
    """Add optional data upgrade migrations here"""
    pass


def data_downgrades():
    """Add optional data downgrade migrations here"""
    pass
