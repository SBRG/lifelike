"""Add failed login count and check if pass need to be reset

Revision ID: 3c50ed01b05c
Revises: 42cb9144dd13
Create Date: 2021-06-02 13:06:49.783482

"""
from alembic import context
from alembic import op
import sqlalchemy as sa
from sqlalchemy import text
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '3c50ed01b05c'
down_revision = '42cb9144dd13'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('appuser', sa.Column('failed_login_count', sa.Integer(), nullable=True,
                                       server_default=text('0')))
    op.add_column('appuser', sa.Column('forced_password_reset', sa.Boolean(), nullable=True))
    # ### end Alembic commands ###
    if context.get_x_argument(as_dictionary=True).get('data_migrate', None):
        data_upgrades()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('appuser', 'forced_password_reset')
    op.drop_column('appuser', 'failed_login_count')
    # ### end Alembic commands ###
    # NOTE: In practice perfect downgrades are difficult and in some cases
    # impossible! It is more practical to use database backups/snapshots to
    # "downgrade" the database. Changes to the database that we intend to
    # push to production should always be added to a NEW migration.
    # (i.e. "downgrade forward"!)


def data_upgrades():
    """Add optional data upgrade migrations here"""
    pass


def data_downgrades():
    """Add optional data downgrade migrations here"""
    pass
