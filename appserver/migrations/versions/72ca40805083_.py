"""Modifies GlobalList annotation meta data to use
singular (Entity) instead of plural form (Entities)

Revision ID: 72ca40805083
Revises: e4e01bc5ad23
Create Date: 2020-12-04 20:38:39.488053

"""
import copy
from alembic import context
from alembic import op
import logging
import sqlalchemy as sa
from sqlalchemy import and_
from sqlalchemy import func
from sqlalchemy.dialects import postgresql
from sqlalchemy.orm.session import Session
from sqlalchemy.sql import table, column

logging.getLogger('sqlalchemy.engine').setLevel(logging.DEBUG)

# revision identifiers, used by Alembic.
revision = '72ca40805083'
down_revision = 'e4e01bc5ad23'
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # ### end Alembic commands ###
    if context.get_x_argument(as_dictionary=True).get('data_migrate', None):
        data_upgrades()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
    # NOTE: In practice perfect downgrades are difficult and in some cases
    # impossible! It is more practical to use database backups/snapshots to
    # "downgrade" the database. Changes to the database that we intend to
    # push to production should always be added to a NEW migration.
    # (i.e. "downgrade forward"!)


def data_upgrades():
    """Add optional data upgrade migrations here"""
    session = Session(op.get_bind())
    gl_table = table(
        'global_list',
        column('id', sa.Integer),
        column('annotation', postgresql.JSONB)
    )
    query = session.execute(sa.select([
        gl_table.c.id,
        gl_table.c.annotation,
    ]).where(
        gl_table.c.annotation['meta']['type'].astext == 'Entities',
    ))

    for gl_id, gl_annotation in query.fetchall():
        new_annotation = copy.deepcopy(gl_annotation)
        new_annotation['meta']['type'] = 'Entity'
        session.execute(gl_table.update().where(
            gl_table.c.id == gl_id
        ).values(annotation=new_annotation))
        logging.debug(f'Modified annotation: {new_annotation}')

    logging.debug(f'Completed modifications')

def data_downgrades():
    """Add optional data downgrade migrations here"""
    pass
