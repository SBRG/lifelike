"""Update annotations to have the entity type prepend to id.

Revision ID: b90a32885a8f
Revises: 600460da634d
Create Date: 2020-12-01 21:01:36.856346

"""
from alembic import context
from alembic import op
import sqlalchemy as sa

from sqlalchemy.orm.session import Session
from sqlalchemy.sql import table, column
from sqlalchemy.dialects import postgresql

from neo4japp.models import Files


# revision identifiers, used by Alembic.
revision = 'b90a32885a8f'
down_revision = '600460da634d'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
    if context.get_x_argument(as_dictionary=True).get('data_migrate', None):
        data_upgrades()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
    # NOTE: In practice perfect downgrades are difficult and in some cases
    # impossible! It is more practical to use database backups/snapshots to
    # "downgrade" the database. Changes to the database that we intend to
    # push to production should always be added to a NEW migration.
    # (i.e. "downgrade forward"!)


def window_chunk(q):
    while True:
        chunk = q.fetchmany(100)
        if not chunk:
            break
        yield chunk


def update_annotations(session, tableclause, files):
    updated_files = []
    for f in files:
        if f.annotations:
            annotations_list = f.annotations['documents'][0]['passages'][0]['annotations']

            updated_annotations = []
            for annotation in annotations_list:
                entity_id = annotation['meta']['id']
                entity_idtype = annotation['meta']['idType']

                if entity_idtype not in entity_id:
                    entity_id = f'{entity_idtype}:{entity_id}'
                    annotation['meta']['id'] = entity_id

                updated_annotations.append(annotation)

            f.annotations['documents'][0]['passages'][0]['annotations'] = updated_annotations
            updated_files.append({'id': f.id, 'annotations': f.annotations})
    session.bulk_update_mappings(Files, updated_files)
    session.commit()


def data_upgrades():
    """Add optional data upgrade migrations here"""
    conn = op.get_bind()
    session = Session(conn)

    tableclause = table(
        'files',
        column('id', sa.Integer),
        column('annotations', postgresql.JSONB))

    results = conn.execution_options(stream_results=True).execute(
        sa.select([
            tableclause.c.id,
            tableclause.c.annotations
        ]))

    for chunk in window_chunk(results):
        update_annotations(session, tableclause, chunk)


def data_downgrades():
    """Add optional data downgrade migrations here"""
    pass
