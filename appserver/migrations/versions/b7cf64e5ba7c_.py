"""Renames the date columns to have consistent names
across all tables which use the TimestampMixin

Revision ID: b7cf64e5ba7c
Revises: 6a280c7c84f2
Create Date: 2020-09-10 23:36:03.265070

"""
from alembic import context
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision = 'b7cf64e5ba7c'
down_revision = '6a280c7c84f2'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('project', 'date_modified', new_column_name='modified_date')
    op.alter_column('project_backup', 'date_modified', new_column_name='modified_date')
    op.alter_column('project_version', 'date_modified', new_column_name='modified_date')
    op.alter_column('project_version', 'creation_date',
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.TIMESTAMP(timezone=True),
            nullable=False)
    op.alter_column('project_version', 'modified_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.TIMESTAMP(timezone=True),
               nullable=False)
    # ### end Alembic commands ###
    if context.get_x_argument(as_dictionary=True).get('data_migrate', None):
        data_upgrades()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('project', 'modified_date', new_column_name='date_modified')
    op.alter_column('project_backup', 'modified_date', new_column_name='date_modified')
    op.alter_column('project_version', 'modified_date', new_column_name='date_modified')
    op.alter_column('project_version', 'modified_date',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('project_version', 'creation_date',
               existing_type=sa.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    # ### end Alembic commands ###
    # NOTE: In practice perfect downgrades are difficult and in some cases
    # impossible! It is more practical to use database backups/snapshots to
    # "downgrade" the database. Changes to the database that we intend to
    # push to production should always be added to a NEW migration.
    # (i.e. "downgrade forward"!)


def data_upgrades():
    """Add optional data upgrade migrations here"""
    pass


def data_downgrades():
    """Add optional data downgrade migrations here"""
    pass
