""""Update project model to have URI hash_id

Revision ID: ca616cde5e21
Revises: 384e13b3ec54
Create Date: 2020-04-09 18:59:16.619547

"""
from alembic import context
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'ca616cde5e21'
down_revision = '384e13b3ec54'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('project', sa.Column('hash_id', sa.String(length=50), nullable=True))
    op.create_unique_constraint(op.f('uq_project_hash_id'), 'project', ['hash_id'])
    # ### end Alembic commands ###
    if context.get_x_argument(as_dictionary=True).get('data_migrate', None):
        data_upgrades()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('uq_project_hash_id'), 'project', type_='unique')
    op.drop_column('project', 'hash_id')
    # ### end Alembic commands ###
    # NOTE: In practice perfect downgrades are difficult and in some cases
    # impossible! It is more practical to use database backups/snapshots to
    # "downgrade" the database. Changes to the database that we intend to
    # push to production should always be added to a NEW migration.
    # (i.e. "downgrade forward"!)


def data_upgrades():
    """Add optional data upgrade migrations here"""
    pass


def data_downgrades():
    """Add optional data downgrade migrations here"""
    pass
