"""Add table lmdbs_dates, add column annotations_date to table files

Revision ID: 044ad2ec6526
Revises: 868c69bf2137
Create Date: 2020-06-15 12:20:38.455164

"""
from alembic import context
from alembic import op
import sqlalchemy as sa
from datetime import datetime, timezone


# revision identifiers, used by Alembic.
revision = '044ad2ec6526'
down_revision = '868c69bf2137'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('lmdbs_dates',
    sa.Column('name', sa.String(length=256), nullable=False),
    sa.Column('date', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('name', name=op.f('pk_lmdbs_dates'))
    )
    op.add_column(
        'files',
        sa.Column('annotations_date', sa.TIMESTAMP(timezone=True), nullable=True)
    )
    op.execute('UPDATE files SET annotations_date = creation_date')
    op.alter_column('files', 'annotations_date', nullable=False)
    # ### end Alembic commands ###
    if context.get_x_argument(as_dictionary=True).get('data_migrate', None):
        data_upgrades()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('files', 'annotations_date')
    op.drop_table('lmdbs_dates')
    # ### end Alembic commands ###
    # NOTE: In practice perfect downgrades are difficult and in some cases
    # impossible! It is more practical to use database backups/snapshots to
    # "downgrade" the database. Changes to the database that we intend to
    # push to production should always be added to a NEW migration.
    # (i.e. "downgrade forward"!)


def data_upgrades():
    """Add optional data upgrade migrations here"""
    pass


def data_downgrades():
    """Add optional data downgrade migrations here"""
    pass
